- Category: text
  Output: >
    Welcome to the second lesson on Python programming! 
    Besides numbers, Python can also manipulate strings, which
    can be expressed in several ways. They can be enclosed in
    single quotes ('...') or double quotes ("...") with the 
    same result. Lets get started!

- Category: command
  Output: Try your first string in Python! Print spam 
    eggs with single or double quotes
  Answer: print("spam eggs")
  Hint: Type 'spam eggs' at the prompt

- Category: command
  Output: >
   You can use the new line operator (\n) to tell Python to print
   text in a new line. Can you try printing the string, First Line
   and then print a string Second Line in a new line?
  Answer: print('First Line\nSecond Line' )
  Hint: >
    Type print('First Line.\nSecond Line') at the prompt. 
    Make sure to put the string in quotes to indicate a string!

- Category: command
  Output: > 
    Well done! However, if you did not want the next line 
    character, simply preface a string by adding 'r' before the first 
    quote. Try printing C:\some\name
  Answer: print(r"C:\some\name")
  Hint: Type print(r"C:\some\name") at the prompt. You are almost there!

- Category: getValue
  Output: >
    Great going! Strings can be concatenated (glued together)
    with the + operator, and repeated with *. For example
    you can pass the string 'unununium' by multiplying (*) 'un' 3
    times and adding 'ium' to it. Can you try this?
  Value: 'unununium'
  Hint: >
     "Type  3 * 'un' + 'ium' at the prompt"

- Category: command
  Output: >
    And of course you can concatenate a variable and a string! To
    test this, can you assign the variable 'prefix' to string 'Py'?
  Answer: prefix = 'Py'
  Hint: >
     Type prefix = 'Py' at the prompt".


- Category: command
  Output: >
    Now concantenate 'thon' to the variable prefix with the '+'
    operator to get the string Python. Finally assign, the output
    to the variable 'word'.
  Answer: word = prefix + 'thon'
  Hint: >
    Type word = prefix + 'thon'' at the prompt.

- Category: text
  Output: >
    Nice! Next, Strings can be indexed (subscripted), with the first
    character having index 0. There is no separate
    character type. A character is simply a string of size one.

- Category: command
  Output: >
    To index in Python, use square brackets([]). If you wanted
    to get P from the variable 'word', you would do word[0] in 
    Python. Can you get the first letter from word?
  Answer: word[0]
  Hint: Type word[0] at the prompt.

- Category: command
  Output: >
    Let's practice a few variations of indexing strings in Python.
    Indices may also be negative numbers, to start counting from
    the right. You can get the last letter from word by indexing
    with -1. Can you try getting the last letter in word with
    negative indexing?
  Answer: word[-1]
  Hint: Type word[-1] at the prompt.

- Category: text
  Output: >
    Good going! In addition to indexing, slicing is \
    also supported. While indexing is used to obtain \
    individual characters, slicing allows you to obtain substring.

- Category: command
  Output: >
    Remember, the last index is exluded when slicing. For example,
    if you want the letters 'Py' from word, you would do word[0:2]
    where the 2nd index (3rd letter in word) is ignored. Can you
    get the first 2 letters from word?
  Answer: word[0:2]
  Hint: Type word[0:2] at the prompt.

- Category: command
  Output: >
    Finally, you can get the length of a string using the len() 
    command. Can you get the length of 'word'?
  Answer: len(word)
  Hint: Type len(word) at the prompt.


- Category: text
  Output: "That brings us to the end of this lesson! You can continue \
  on to the next lesson in the course. Thank you!"





  